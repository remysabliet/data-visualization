{"version":3,"sources":["logo.svg","exercises/index.js","exercises/1-blackbox/index.jsx","exercises/2-colorBands/Swatch.jsx","exercises/2-colorBands/index.jsx","assets/images/H1BSalaryPreloading.png","exercises/3-averageH1B-salaries/Preloader.js","exercises/3-averageH1B-salaries/DataHandling.js","exercises/3-averageH1B-salaries/components/CountyMap/County.js","exercises/3-averageH1B-salaries/components/CountyMap/CountyMap.js","exercises/3-averageH1B-salaries/components/Histogram/Axis.js","exercises/3-averageH1B-salaries/components/D3blackbox.js","exercises/3-averageH1B-salaries/components/Histogram/HistogramBar.js","exercises/3-averageH1B-salaries/components/Histogram/index.js","exercises/3-averageH1B-salaries/components/Histogram/Histogram.js","exercises/3-averageH1B-salaries/components/Meta/USStatesMap.js","exercises/3-averageH1B-salaries/components/Meta/Description.js","exercises/3-averageH1B-salaries/components/Meta/GraphDescription.js","exercises/3-averageH1B-salaries/components/Meta/Title.js","exercises/3-averageH1B-salaries/components/MedianLine.js","exercises/3-averageH1B-salaries/components/Controls/Toggle.js","exercises/3-averageH1B-salaries/components/Controls/ControlRow.js","exercises/3-averageH1B-salaries/components/Controls/Controls.js","exercises/3-averageH1B-salaries/index.jsx","routes/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Menu","history","useHistory","className","onClick","push","Blackbox","gref","useRef","useEffect","renderAxis","scale","d3","domain","range","axis","current","call","width","height","transform","ref","Swatch","color","x","y","console","log","style","fill","Colors","propWidth","colors","useState","setWidth","setRandomArray","map","i","step","uniqid","Preloader","src","PreloaderImg","role","cleanIncomes","d","countyName","USstate","MedianIncome","Number","lowerBound","upperBound","dateParse","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","loadAllData","a","callback","_","noop","Promise","all","then","values","countyNames","medianIncomesMap","filter","find","forEach","techSalaries","isNull","usTopoJson","medianIncomes","medianIncomesByCounty","groupBy","medianIncomesByUSState","USstateNames","ChoroplethColors","reverse","County","nextProps","nextState","this","props","zoom","value","geoPath","feature","quantize","title","Component","CountyMap","projection","updateD3","newProps","translate","us","statePaths","topojson","objects","states","features","centroid","statesMesh","b","counties","countyValueMap","fromPairs","stroke","strokeLineJoin","D3render","Axis","ticks","data","length","refs","anchor","HistogramBar","percent","label","toFixed","replace","textAnchor","Histogram","histogram","widthScale","yScale","thresholds","bins","bars","counts","axisMargin","x1","bottomMargin","bar","x0","key","makeBar","bind","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Description","year","allData","getFullYear","jobTitle","filteredBy","USStatesMap","toUpperCase","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","medians","ordered","sortBy","keys","items","d3mean","medianIncome","best","countyMedian","byCity","S","titleCase","s","mean","jobFragment","jobTitleFragment","yearFragment","format","href","scaleLinear","d3extent","tickFormat","deviation","d3deviation","yearsFragment","UStateFragment","previousYearFragment","countyFragment","GraphDescription","Title","USstateFragment","stateFragment","MedianLine","median","line","medianLabel","Toggle","event","handleClick","ControlRow","picked","newState","toggleValues","state","mapValues","updateDataFilter","setState","toggles","toggleNames","zipObject","makePick","capitalize","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","window","location","hash","split","updateYearFilter","updateUSstateFilter","updateJobTitleFilter","reset","join","reportUpdateUpTheChain","filters","isEqual","years","Set","jobTitles","USstates","Array","from","H1BSalaryDiagram","salariesFilter","techSalariesMap","medianHousehold","salaries","changedSalaries","changedFilters","Object","some","k","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Routes","exact","path","render","prop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47850621.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './index.scss';\nimport { useHistory } from 'react-router-dom';\n\nexport const Menu = () => {\n  let history = useHistory();\n  return (\n    <>\n      <div className='index'>\n        <h1> Index</h1>\n        <ul>\n          <li>\n            <a onClick={() => history.push('/x-axis')}> X-Axis </a>\n          </li>\n          <li>\n            {' '}\n            <a onClick={() => history.push('/color-bands')}> Colors strip </a>{' '}\n          </li>\n          <li>\n            {' '}\n            <a onClick={() => history.push('/h1bsalary')}>\n              {' '}\n              H1B average salaries{' '}\n            </a>{' '}\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Blackbox = () => {\n  const gref = useRef();\n\n  useEffect(() => {\n    renderAxis();\n  });\n\n  const renderAxis = () => {\n    const scale = d3.scaleLinear().domain([0, 10]).range([0, 200]);\n    const axis = d3.axisBottom(scale);\n    d3.select(gref.current).call(axis);\n\n  };\n\n  return (\n    <svg width='800' height='100'>\n      <g transform='translate(10, 30)' ref={gref} />\n    </svg>\n  );\n};\n\nexport default Blackbox;\n","export const Swatch = ({ color, width, x, y }) => {\n  console.log('Swatch props', color, width, x, y )\n  return <rect width={width} height='20' x={x} y={y} style={{ fill: color }} />;\n};\n","import { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport uniqid from 'uniqid';\n\nimport { Swatch } from './Swatch';\n\nconst Colors = ({ propWidth }) => {\n  const colors = d3.schemeCategory10;\n  // In order to set a function inside useState we must declare inside an array function  useState(() => your function)\n  const [width, setWidth] = useState(() => d3.scaleBand().domain(d3.range(10)));\n\n  const [randomArray, setRandomArray] = useState([]); // Trick to force react to rerender width function\n\n  useEffect(() => {\n    setWidth(() => d3.scaleBand().domain(d3.range(10)));\n  }, [propWidth]);\n\n  useEffect(() => {\n    if (width) {\n      console.log('inside width function', propWidth);\n      width.range([0, propWidth]);\n\n      setRandomArray([]); // Trick to force react to update the Swatch map (mysterious logic), others type of data like integer, boolean doesn't works\n    }\n  }, [width]);\n\n  return (\n    <>\n      <svg width='600' height='100'>\n        <g transform='translate(10, 30)'>\n          {d3.range(10).map((i) => {\n            if (width) {\n              console.log('step', width.step(), width(i));\n            }\n            return (\n              <Swatch\n                key={uniqid()}\n                color={colors[i]}\n                width={width.step()}\n                x={width(i)}\n                y='0'\n              />\n            );\n          })}\n        </g>\n      </svg>\n    </>\n  );\n};\n\nexport default Colors;\n","export default __webpack_public_path__ + \"static/media/H1BSalaryPreloading.07c95b59.png\";","import React from 'react';\n\nimport PreloaderImg from '../../assets/images/H1BSalaryPreloading.png';\n\nconst Preloader = () => (\n  <div className='App container'>\n    <h1>The average H1B in tech pays $86,164/year</h1>\n    <p className='lead'>\n      Since 2012 the US tech industry has sponsored 176,075 H1B work visas. Most\n      of them paid <b>$60,660 to $111,668</b> per year (1 standard de\\ viation).\n      <span>\n        Show a Preloader 35 The best city for an H1B is <b>Kirkland, WA</b> with\n        an average \\ salary <b>$39,465 above local household median</b>. Median\n        household salary is a good proxy for cost of living in an\\ individual\n        area\n      </span>{' '}\n    </p>\n    <img src={PreloaderImg} style={{ width: '100%' }} role='presentation' />\n    <h2 className='text-center'>Loading data ...</h2>\n  </div>\n);\n\nexport default Preloader;\n","import * as d3 from 'd3';\nimport _ from 'lodash';\nimport * as d3queue from 'd3-queue';\n\nconst cleanIncomes = (d) => ({\n  countyName: d['Name'],\n  USstate: d['State'],\n  MedianIncome: Number(d['Median Household Income']),\n  lowerBound: Number(d['90% CI Lower Bound']),\n  upperBound: Number(d['90% CI Upper Bound']),\n});\n\nconst dateParse = d3.timeParse('%m/%d/%Y');\n\nconst cleanSalary = (d) => {\n  if (!d['base salary'] || Number(d['base salary']) > 300000) {\n    return null;\n  }\n\n  return {\n    employer: d.employer,\n    submit_date: dateParse(d['submit date']),\n    start_date: dateParse(d['start date']),\n    case_status: d['case status'],\n    job_title: d['job title'],\n    clean_job_title: d['job title'],\n    base_salary: Number(d['base salary']),\n    city: d['city'],\n    USstate: d['state'],\n    county: d['county'],\n    countyID: d['countyID'],\n  };\n};\nconst cleanUSStateName = (d) => ({\n  code: d.code,\n  id: Number(d.id),\n  name: d.name,\n});\n\n// If callback is false, we set it to _.noop - a function that does nothing. This lets us later call callback() without worrying whether it was given as an argument.\nexport const loadAllData = async (callback = _.noop) => {\n  console.log('loadAllData start');\n  Promise.all([\n    d3.json('data/us.json'),\n    d3.csv('data/us-county-names-normalized.csv'),\n    d3.csv('data/county-median-incomes.csv', cleanIncomes),\n    d3.csv('data/h1bs-2012-2016-shortened.csv', cleanSalary),\n    d3.tsv('data/us-state-names.tsv', cleanUSStateName),\n  ]).then((values) => {\n\n    const countyNames = values[1].map(({ id, name }) => ({\n      id: Number(id),\n      name: name,\n    }));\n\n    let medianIncomesMap = {};\n    values[2]\n      .filter((d) => _.find(countyNames, { name: d['countyName'] }))\n      .forEach((d) => {\n        d['countyID'] = _.find(countyNames, { name: d['countyName'] }).id;\n        medianIncomesMap[d.countyID] = d;\n      });\n\n    const techSalaries = values[3].filter((d) => !_.isNull(d));\n\n    callback({\n      usTopoJson: values[0],\n      countyNames: countyNames,\n      medianIncomes: medianIncomesMap,\n      medianIncomesByCounty: _.groupBy(values[2], 'countyName'),\n      medianIncomesByUSState: _.groupBy(values[2], 'USstate'),\n      techSalaries: techSalaries,\n      USstateNames: values[4],\n    });\n  });\n};\n","\nimport React, { Component } from 'react';\nimport _ from 'lodash';\n\nconst ChoroplethColors = _.reverse([\n    'rgb(247,251,255)',\n    'rgb(222,235,247)',\n    'rgb(198,219,239)',\n    'rgb(158,202,225)',\n    'rgb(107,174,214)',\n    'rgb(66,146,198)',\n    'rgb(33,113,181)',\n    'rgb(8,81,156)',\n    'rgb(8,48,107)'\n]);\n\nconst BlankColor = 'rgb(240,240,240)'\n\n// Combine array of colors and quantize scale to pick fill color\n// Return a <path> element\nclass County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom\n            || value !== nextProps.value;\n    }\n\n    render() {\n        const { value, geoPath, feature, quantize } = this.props;\n\n        let color = BlankColor;\n\n        if (value) {\n            color = ChoroplethColors[quantize(value)];\n        }\n        return (\n            <path d={geoPath(feature)} style={{fill: color}} title={feature.id} />\n        );\n    }\n}\n\nexport default County;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport _ from 'lodash';\n\nimport County from './County';\n\nclass CountyMap extends Component {\n  constructor(props) {\n    super(props);\n\n    // We need 3 D3 objects to build a choropleth map: a geographical projection, a path generator, and a quantize scale for colors\n\n    // A map projection is a way to flatten a globe's surface into a plane in order to make a map\n    this.projection = d3.geoAlbersUsa().scale(1280);\n\n    // Takes a projection and returns a function that generates the d attribute of <path> elements. This is the most general way to specify SVG shapes.\n    this.geoPath = d3.geoPath().projection(this.projection);\n\n    // quantize is a D3 scale.\n    // This one splits a domain into 9 quantiles and assigns them specific values from the range.\n    // Let’s say our domain goes from 0 to 90. Calling the scale with any number between 0 and 9 would\n    // return 1. 10 to 19 returns 2 and so on. We’ll use it to pick colors from an array.\n    this.quantize = d3.scaleQuantize().range(d3.range(9));\n    this.updateD3(props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.updateD3(newProps);\n  }\n  updateD3(props) {\n    // translates (moves) the projection to the center of our drawing area and sets a scale property.\n    this.projection\n      .translate([props.width / 2, props.height / 2])\n      .scale(props.width * 1.3);\n\n    if (props.zoom && props.usTopoJson) {\n      // Find the US state we are zoom-ing on\n      const us = props.usTopoJson,\n        statePaths = topojson.feature(us, us.objects.states).features,\n        id = _.find(props.USstateNames, { code: props.zoom }).id;\n\n      //tweak the scale property to make the map bigger, this create a zooming effect\n      this.projection.scale(props.width * 4.5);\n\n      // method to calculate the state its center point. This gives us a new coordinate to translate our projection onto.\n      const centroid = this.geoPath.centroid(_.find(statePaths, { id: id })),\n        translate = this.projection.translate();\n\n      // Translate our projection.  helps us align the center point of our zoom US state with the center of the drawing area.\n      this.projection.translate([\n        translate[0] - centroid[0] + props.width / 2,\n        translate[1] - centroid[1] + props.height / 2,\n      ]);\n    }\n    if (props.values) {\n      // update the quantize scale’s domain with new values. Using d3.quantile lets us offset the scale to produce a more interesting map.\n      // The values were discovered experimentally - they cut off the top and bottom of the range because there isn’t much there\n\n      // Here we are removing the 15% inferior and superior values of the original County's value (tech avg salary - household avg salary)\n      this.quantize.domain([\n        d3.quantile(props.values, 0.15, (d) => d.value), // Compute the range of County.Value for a p-quantile = 0.15 (between 0 and 1)\n        d3.quantile(props.values, 0.85, (d) => d.value),\n      ]);\n    }\n  }\n\n  render() {\n    if (!this.props.usTopoJson) {\n      return null;\n    } else {\n      const us = this.props.usTopoJson,\n        // Calculates a mesh for US states - a thin line around the edges.\n        // The filter function remove duplicates, here from 268 occurences we pass to 66 occurences only\n        statesMesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b),\n        // Calculates the features for each county - fill in with color.\n\n        // convert TopoJSON to GeoJSON in order to render with d3.geoPath()\n        // counties are subpart of a state, 3220 in total\n        counties = topojson.feature(us, us.objects.counties).features;\n\n      // Build a dictionary that maps county identifiers to their values\n      const countyValueMap = _.fromPairs(\n        this.props.values.map((d) => [d.countyID, d.value])\n      );\n      // counties.map((feature) =>{   console.log('countyValueMap', countyValueMap, 'feature.id', feature.id);})\n\n      // Returns all the county one by one and the the mesh for the whole US (one time only) they are surrended by <g> </g>\n      return (\n        <>\n          <g transform={`translate(${this.props.x}, ${this.props.y})`}>\n            {counties.map((feature) => (\n              <County\n                geoPath={this.geoPath} //function that generate the d attribute from GeoJson 's geometry/feature (feature being a geometry with additional properties)\n                feature={feature} //\n                zoom={this.props.zoom}\n                key={feature.id}\n                quantize={this.quantize}\n                value={countyValueMap[feature.id]}\n              />\n            ))}\n            <path // Return the mesh (lines between states)\n              d={this.geoPath(statesMesh)}\n              style={{\n                fill: 'none',\n                stroke: '#fff',\n                strokeLineJoin: 'round',\n              }}\n            />\n          </g>\n          )\n        </>\n      );\n    }\n  }\n}\n\nexport default CountyMap;\n","import * as d3 from 'd3';\nimport D3blackbox from '../D3blackbox';\n\nconst Axis = D3blackbox(function () {\n  // We use D3’s axisLeft generator, configure its tickFormat, give it a scale to use, and specify how many ticks we want.\n  // Then select the anchor element rendered by D3blackbox and call the axis generator on it.\n  const axis = d3\n    .axisLeft() // legend on the left side of the axis  \n    //Legend format, here SI-prefix with two significant digits, \"42M\" (will keep the 2 first digit)\n    // refers to d3.format to see all possible format\n    // .tickFormat((d) => `${d3.format('.2s')(d)}`)\n    .scale(this.props.scale) // yScale function to transform domain values to be displayed on the y axis (in pixel)\n    .ticks(this.props.data.length); // 11 ticks\n\n  // select the element having the ref \"anchor\" (<g> element of the Blackbox), and then Hook itself into it (this will attach the axes element to the g)\n  // call is a d3 function , Invoke the specified function exactly once, passing in this selection along with any optional arguments. Returns this selection.\n  d3.select(this.refs.anchor).call(axis);\n});\nexport default Axis;\n","import React, { Component } from 'react';\n\n/**\n * This HOC add a <g> tag\n * \n * Take a D3render function, call it on componentDidMount and componentDidUpdate to keep things in\n * sync, and render a positioned anchor <g> element for D3render to hook into.\n */\nexport default function D3blackbox(D3render) {\n  return class Blackbox extends Component {\n    componentDidMount() {\n      D3render.call(this);\n    }\n    componentDidUpdate() {\n      D3render.call(this);\n    }\n    render() {\n      // x and y are inheritated from props of the Enclosed component(function)\n      const { x, y } = this.props;\n\n      // render a positioned anchor element for D3render (the Y Axis) to hook into.\n      return <g transform={`translate(${x}, ${y})`} ref='anchor' />;\n    }\n  };\n}\n","const HistogramBar = ({ percent, x, y, width, height }) => {\n  let translate = `translate(${x}, ${y})`,\n    label = percent.toFixed(0) + '%';  //nb of digit after the decimal point\n let a = 9\n \n  if (percent < 1) {\n    label = percent.toFixed(2) + '%';\n  }\n\n  if (width < 20) {\n    label = label.replace('%', '');\n  }\n\n  if (width < 10) {\n    label = '';\n  }\n\n  return (\n    <g transform={translate} className='bar'>\n      <rect\n        width={width}\n        height={height - 2}\n        transform='translate(0, 1)'\n      ></rect>\n      <text textAnchor='end' x={width - 5} y={height / 2 + 3}>\n        {label}\n      </text>{' '}\n    </g>\n  );\n};\n\nexport default HistogramBar\n\n","import Histogram from './Histogram'\n\nexport default Histogram\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nimport Axis from './Axis';\nimport HistogramBar from './HistogramBar';\n\nclass Histogram extends Component {\n  constructor(props) {\n    super();\n\n    this.histogram = d3.bin();\n\n    // The horizontal scale of a bar\n    this.widthScale = d3.scaleLinear();\n\n    // Vertical scale of a bar\n    this.yScale = d3.scaleLinear();\n\n    this.updateD3(props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.updateD3(newProps);\n  }\n\n  updateD3(props) {\n    this.histogram.thresholds(props.bins).value(props.value);\n\n    const bars = this.histogram(props.data),\n      counts = bars.map((d) => d.length);\n\n    // Domain is between 2 and 1742 counts [2, 1742] (count of occurence)\n    // The range, that is to say how wide those values will be displayed on the X-Axis is equal to [0, 417] (px) (Histogram with: 500px, Left axis's width: '83px)\n    this.widthScale\n      .domain([d3.min(counts), d3.max(counts)])\n      .range([0, props.width - props.axisMargin]);\n\n    // domain [0, 220 000] ($)\n    // range [0, 485] (px)\n    this.yScale\n      .domain([0, d3.max(bars, (d) => d.x1)]) // Between 0$ and 220000$ the max salary (bar.x1 value)\n      .range([0, props.height - props.y - props.bottomMargin]); // height of the diagram (500px) - y (10px , I dont know what is this y for)  - BottomMargin (5px)\n  }\n\n  // makeBar is a function that takes a histogram bar’s metadata and returns a HistogramBar component.\n  makeBar(bar) {\n    let percent = (bar.length / this.props.data.length) * 100;\n    let props = {\n      percent: percent,\n      x: this.props.axisMargin,\n      y: this.yScale(bar.x0),\n      width: this.widthScale(bar.length),\n      height: this.yScale(bar.x1 - bar.x0), // for example for the first bar (top to bottom) x0 = 0, x1: 20000\n      key: 'histogram-bar-' + bar.x0,\n    };\n    return <HistogramBar {...props} />;\n  }\n\n  render() {\n    const translate = `translate(${this.props.x}, ${this.props.y})`, // we translate because of the margin\n      bars = this.histogram(this.props.data);\n    return (\n      <g className='histogram' transform={translate}>\n        <g className='bars'> {bars.map(this.makeBar.bind(this))}</g>{' '}\n        <Axis\n          x={this.props.axisMargin - 3} //80\n          y={0}\n          data={bars}\n          scale={this.yScale} // It is an Y axis, so we will use the yScale function\n        />\n      </g>\n    );\n  }\n}\n\nexport default Histogram;\n","export default {\n  AL: 'Alabama',\n  AK: 'Alaska',\n  AS: 'American Samoa',\n  AZ: 'Arizona',\n  AR: 'Arkansas',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DE: 'Delaware',\n  DC: 'District Of Columbia',\n  FM: 'Federated States Of Micronesia',\n  FL: 'Florida',\n  GA: 'Georgia',\n  GU: 'Guam',\n  HI: 'Hawaii',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  IA: 'Iowa',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  ME: 'Maine',\n  MH: 'Marshall Islands',\n  MD: 'Maryland',\n  MA: 'Massachusetts',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MS: 'Mississippi',\n  MO: 'Missouri',\n  MT: 'Montana',\n  NE: 'Nebraska',\n  NV: 'Nevada',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NY: 'New York',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  MP: 'Northern Mariana Islands',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PW: 'Palau',\n  PA: 'Pennsylvania',\n  PR: 'Puerto Rico',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VT: 'Vermont',\n  VI: 'Virgin Islands',\n  VA: 'Virginia',\n  WA: 'Washington',\n  WV: 'West Virginia',\n  WI: 'Wisconsin',\n  WY: 'Wyoming',\n};\n","\nimport React, { Component } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\nimport _ from 'lodash';\nimport S from 'string';\n\nimport USStatesMap from './USStatesMap';\n\n\nclass Description extends Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter(d => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter(d => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter(d => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === '*' ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === '*') {\n            fragment = \"\";\n        }else if (year === 2012) {\n            fragment = \"\";\n        }else{\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year-1);\n\n\n            if (jobTitle !== '*') {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== '*') {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length/lastYear.length > 2) {\n                fragment = \", \"+(this.props.data.length/lastYear.length).toFixed()+\" times more than the year before\";\n            }else{\n                const percent = ((1-lastYear.length/this.props.data.length)*100).toFixed();\n\n                fragment = \", \"+Math.abs(percent)+\"% \"+(percent > 0 ? \"more\" : \"less\")+\" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === '*') {\n            fragment = \"H1B work visas\";\n        }else{\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            }else{\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, 'countyID'),\n              medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n             .map(county => byCounty[county])\n             .filter(d => d.length/this.props.data.length > 0.01),\n            items => d3mean(items,\n                            d => d.base_salary) - medians[items[0].countyID][0].medianIncome);\n\n        let best = ordered[ordered.length-1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, 'city');\n\n        ordered = _.sortBy(_.keys(byCity)\n                            .map(city => byCity[city])\n                            .filter(d => d.length/best.length > 0.01),\n                           items => d3mean(items, d => d.base_salary) - countyMedian);\n\n        best = ordered[ordered.length-1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n              mean = d3mean(best, d => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n                                .replace(\"H1B work visas for\", \"\")\n                                .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city {jobFragment.length ? `for ${jobFragment} on an H1B` : 'for an H1B'} {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average  salary ${this.format(mean - countyMedian)} above the local household median. Median household income is a good proxy for cost of living in an area. <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>.\n            </span>\n        );\n    }\n\n    get format() {\n        return scaleLinear()\n                 .domain(d3extent(this.props.data, d => d.base_salary))\n                 .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n              mean = d3mean(this.props.data, d => d.base_salary),\n              deviation = d3deviation(this.props.data, d => d.base_salary);\n\n        return (\n            <p className=\"lead\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the {this.UStateFragment} tech industry {this.yearsFragment ? \"sponsored\" : \"has sponsored\"} <b>{format(this.props.data.length)} {this.jobTitleFragment}</b>{this.previousYearFragment}. Most of them paid <b>${format(mean-deviation)} to ${format(mean+deviation)}</b> per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport default Description;\n","\nimport React, { Component } from 'react';\n\nclass GraphDescription extends Component {\n    get jobTitleFragment() {\n        const { jobTitle } = this.props.filteredBy;\n        let title;\n\n        if (jobTitle === '*') {\n            title = 'in tech';\n        }else{\n            if (jobTitle === \"other\") {\n                title = \"in tech\";\n            }else{\n                title = `a Software ${jobTitle}`;\n            }\n        }\n\n        return title;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"col-md-6 text-center\">\n                    <h3>Best places to be {this.jobTitleFragment}</h3>\n                    <small>Darker color means bigger difference between median household salary<br/>and individual tech salary. Gray means lack of tech salary data.</small>\n                </div>\n                <div className=\"col-md-6 text-center\">\n                    <h3>Salary distribution</h3>\n                    <small>Histogram shows tech salary distribution compared to median household income, which is a good proxy for cost of living.</small>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GraphDescription;\n","// src/components/Meta/Title.js\nimport React, { Component } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { mean as d3mean, extent as d3extent } from 'd3-array';\n\nimport USStatesMap from './USStatesMap';\n\nclass Title extends Component {\n  // selected year\n  get yearsFragment() {\n    const year = this.props.filteredBy.year;\n    return year === '*' ? '' : `in ${year}`;\n  }\n  // selected US state\n  get USstateFragment() {\n    const USstate = this.props.filteredBy.USstate;\n    return USstate === '*' ? '' : USStatesMap[USstate.toUpperCase()];\n  }\n\n  // selected job title\n  get jobTitleFragment() {\n    const { jobTitle, year } = this.props.filteredBy;\n    let title = '';\n    if (jobTitle === '*') {\n      if (year === '*') {\n        title = 'The average H1B in tech pays';\n      } else {\n        title = 'The average tech H1B paid';\n      }\n    } else {\n      if (jobTitle === '*') {\n        title = 'H1Bs in tech pay';\n      } else {\n        title = `Software ${jobTitle}s on an H1B`;\n        if (year === '*') {\n          title += ' make';\n        } else {\n          title += ' made';\n        }\n      }\n    }\n    return title;\n  }\n\n  // HOF High order function \n  // returns a number formatter function\n  get format() {\n    return (\n      scaleLinear()\n        // Tick formatters don’t work well without a domain, so we define it. We don’t need a range because we never use the scale itself.\n        // extent => return min and max simulteanously\n        .domain(d3extent(this.props.data, (d) => d.base_salary))\n        .tickFormat()\n    );\n  }\n\n  render() {\n    const mean = this.format(d3mean(this.props.data, (d) => d.base_salary));\n    let title;\n    if (this.yearsFragment && this.USstateFragment) {\n      title = (\n        <h2>\n          In {this.USstateFragment}, {this.jobTitleFragment} ${mean}/year{' '}\n          {this.yearsFragment}\n        </h2>\n      );\n    } else {\n      title = (\n        <h2>\n          {this.jobTitleFragment} ${mean}/year{' '}\n          {this.USstateFragment ? `in ${this.stateFragment}` : ''}{' '}\n          {this.yearsFragment}\n        </h2>\n      );\n    }\n    return title;\n  }\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass MedianLine extends Component {\n  componentWillMount() {\n    this.yScale = d3.scaleLinear();\n\n    this.updateD3(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.updateD3(newProps);\n  }\n\n  updateD3(props) {\n    this.yScale\n      .domain([0, d3.max(props.data, props.value)])\n      .range([0, props.height - props.y - props.bottomMargin]);\n  }\n\n  render() {\n    const median =\n        this.props.median || d3.median(this.props.data, this.props.value),\n      line = d3.line()([\n        [0, 5],\n        [this.props.width, 5],\n      ]);\n\n    const translate = `translate(${this.props.x}, ${this.yScale(median)})`,\n      medianLabel = `Median Household: $${this.yScale.tickFormat()(median)}`;\n\n    return (\n      <g className='mean' transform={translate}>\n        <text x={this.props.width - 5} y='0' textAnchor='end'>\n          {medianLabel}\n        </text>\n        <path d={line}></path>\n      </g>\n    );\n  }\n}\n\nexport default MedianLine;\n","\nimport React, { Component } from 'react';\n\nclass Toggle extends Component {\n    handleClick(event) {\n       this.props.onClick(this.props.name, !this.props.value);\n    }\n\n    render() {\n        let className = \"btn btn-default\";\n\n        if (this.props.value) {\n            className += \" btn-primary\";\n        }\n\n        return (\n            <button className={className} onClick={this.handleClick.bind(this)}>\n                {this.props.label}\n            </button>\n        );\n    }\n}\n\nexport default Toggle;\n","\nimport React, { Component } from 'react';\nimport _ from 'lodash';\n\nimport Toggle from './Toggle';\n\nclass ControlRow extends Component {\n    makePick(picked, newState) {\n        let toggleValues = this.state.toggleValues;\n\n        toggleValues = _.mapValues(toggleValues,\n                                   (value, key) => newState && key == picked); // eslint-disable-line\n\n        // if newState is false, we want to reset\n        this.props.updateDataFilter(picked, !newState);\n\n        this.setState({toggleValues: toggleValues});\n    }\n\n    componentWillMount() {\n        let toggles = this.props.toggleNames,\n            toggleValues = _.zipObject(toggles,\n                                       toggles.map((name) => name === this.props.picked));\n\n        this.setState({toggleValues: toggleValues});\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.picked !== nextProps.picked) {\n            this.makePick(nextProps.picked, true);\n        }\n    }\n\n    _addToggle(name) {\n        let key = `toggle-${name}`,\n            label = name;\n\n        if (this.props.capitalize) {\n            label = label.toUpperCase();\n        }\n\n        return (\n            <Toggle label={label}\n                    name={name}\n                    key={key}\n                    value={this.state.toggleValues[name]}\n                    onClick={this.makePick.bind(this)} />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {this.props.toggleNames\n                         .map(name => this._addToggle(name))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlRow;\n","\nimport React, { Component } from 'react';\nimport _ from 'lodash';\n\nimport ControlRow from './ControlRow';\n\nclass Controls extends Component {\n    state = {\n        yearFilter: () => true,\n        jobTitleFilter: () => true,\n        USstateFilter: () => true,\n        year: '*',\n        USstate: '*',\n        jobTitle: '*'\n    };\n\n    componentDidMount() {\n        let [year, USstate, jobTitle] = window.location.hash.replace('#', '').split(\"-\");\n\n        if (year !== '*' && year) {\n            this.updateYearFilter(Number(year));\n        }\n        if (USstate !== '*' && USstate) {\n            this.updateUSstateFilter(USstate);\n        }\n        if (jobTitle !== '*' && jobTitle) {\n            this.updateJobTitleFilter(jobTitle);\n        }\n    }\n\n    updateYearFilter(year, reset) {\n        let filter = (d) => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            filter = () => true;\n            year = '*';\n        }\n\n        this.setState({yearFilter: filter,\n                       year: year});\n    }\n\n    updateJobTitleFilter(title, reset) {\n        let filter = (d) => d.clean_job_title === title;\n\n        if (reset || !title) {\n            filter = () => true;\n            title = '*';\n        }\n\n        this.setState({jobTitleFilter: filter,\n                       jobTitle: title});\n    }\n\n    updateUSstateFilter(USstate, reset) {\n        let filter = (d) => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            filter = () => true;\n            USstate = '*';\n        }\n\n        this.setState({USstateFilter: filter,\n                       USstate: USstate});\n    }\n\n    componentDidUpdate() {\n        window.location.hash = [this.state.year || '*',\n                                this.state.USstate || '*',\n                                this.state.jobTitle || '*'].join(\"-\");\n\n        this.reportUpdateUpTheChain();\n    }\n\n    reportUpdateUpTheChain() {\n        this.props.updateDataFilter(\n            ((filters) => {\n                return (d) =>  filters.yearFilter(d)\n                    && filters.jobTitleFilter(d)\n                    && filters.USstateFilter(d);\n            })(this.state),\n            {USstate: this.state.USstate,\n             year: this.state.year,\n             jobTitle: this.state.jobTitle}\n        );\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return !_.isEqual(this.state, nextState);\n    }\n\n    render() {\n        const data = this.props.data;\n\n        const years = new Set(data.map(d => d.submit_date.getFullYear())),\n              jobTitles = new Set(data.map(d => d.clean_job_title)),\n              USstates = new Set(data.map(d => d.USstate));\n\n        return (\n            <div>\n                <ControlRow data={data}\n                            toggleNames={Array.from(years.values())}\n                            picked={this.state.year}\n                            updateDataFilter={this.updateYearFilter.bind(this)} />\n\n                <ControlRow data={data}\n                            toggleNames={Array.from(jobTitles.values())}\n                            picked={this.state.jobTitle}\n                            updateDataFilter={this.updateJobTitleFilter.bind(this)} />\n\n                <ControlRow data={data}\n                            toggleNames={Array.from(USstates.values())}\n                            picked={this.state.USstate}\n                            updateDataFilter={this.updateUSstateFilter.bind(this)}\n                            capitalize=\"true\" />\n            </div>\n        )\n    }\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport Preloader from './Preloader';\nimport { loadAllData } from './DataHandling';\n\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\nimport MedianLine from './components/MedianLine';\n\nimport Controls from './components/Controls';\n\nclass H1BSalaryDiagram extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*',\n    },\n  };\n\n  componentWillMount() {\n    loadAllData((data) => this.setState(data));\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id],\n      salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n\n    const median = d3.median(salaries, (d) => d.base_salary);\n\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.MedianIncome,\n    };\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy,\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { techSalaries, filteredBy } = this.state;\n\n    const changedSalaries =\n      (techSalaries && techSalaries.length) !==\n      (nextState.techSalaries && nextState.techSalaries.length);\n\n    const changedFilters = Object.keys(filteredBy).some(\n      (k) => filteredBy[k] !== nextState.filteredBy[k]\n    );\n\n    return changedSalaries || changedFilters;\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return <Preloader />;\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(\n        this.state.salariesFilter\n      ),\n      filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID'),\n      countyValues = this.state.countyNames\n        .map((county) => this.countyValue(county, filteredSalariesMap))\n        .filter((d) => !_.isNull(d));\n\n    let zoom = null,\n      medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(\n        this.state.medianIncomesByUSState[zoom],\n        (d) => d.medianIncome\n      );\n    }\n\n    return (\n      <div className='App container'>\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description\n          data={filteredSalaries}\n          allData={this.state.techSalaries}\n          medianIncomesByCounty={this.state.medianIncomesByCounty}\n          filteredBy={this.state.filteredBy}\n        />\n\n        <GraphDescription\n          data={filteredSalaries}\n          filteredBy={this.state.filteredBy}\n        />\n\n        <svg width='1100' height='500'>\n          <CountyMap\n            usTopoJson={this.state.usTopoJson}\n            USstateNames={this.state.USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom}\n          />\n\n          <rect\n            x='500'\n            y='0'\n            width='600'\n            height='500'\n            style={{ fill: 'white' }}\n          />\n\n          <Histogram\n            bins={10}\n            width={500}\n            height={500}\n            x='500'\n            y='10'\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            value={(d) => d.base_salary}\n          />\n\n          <MedianLine\n            data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={(d) => d.base_salary}\n          />\n        </svg>\n\n        <Controls\n          data={this.state.techSalaries}\n          updateDataFilter={this.updateDataFilter.bind(this)}\n        />\n\n        <small>\n          Sources: 2014 US census data for median household incomes,{' '}\n          <a href='http://h1bdata.info/'>h1bdata.info</a> for tech salaries\n          (filtered by \"software\")\n        </small>\n      </div>\n    );\n  }\n}\n\nexport default H1BSalaryDiagram;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Menu } from '../exercises';\n\nimport Blackbox from '../exercises/1-blackbox';\nimport Colors from '../exercises/2-colorBands';\nimport H1BSalaryDiagram from '../exercises/3-averageH1B-salaries';\n\nconst Routes = (props) => (\n  <Switch>\n    <Route exact path='/' render={(prop) => <Menu {...props} />} />\n    <Route exact path='/x-axis' render={(prop) => <Blackbox {...props} />} />\n    <Route\n      exact\n      path='/color-bands'\n      render={(prop) => <Colors propWidth={300} {...props} />}\n    />\n    <Route\n      exact\n      path='/h1bsalary'\n      render={(prop) => <H1BSalaryDiagram {...props} />}\n    />\n  </Switch>\n);\n\nexport default Routes;\n","import logo from './logo.svg';\nimport './App.css';\n\n\nimport Routes from './routes';\n\nfunction App(props) {\n  return (\n    <div className='App'>\n      <Routes {...props} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}